#!/usr/bin/env python
"""
Script para probar las acciones de duplicaci√≥n corregidas
Ejecutar: python probar_acciones_corregidas.py
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from snmp_formulas.models import IndexFormula
from olt_models.models import OLTModel
from brands.models import Brand

def mostrar_formulas_actuales():
    """Muestra todas las f√≥rmulas actuales"""
    print("\n" + "="*60)
    print("üìã F√ìRMULAS ACTUALES")
    print("="*60)
    
    formulas = IndexFormula.objects.all().select_related('marca', 'modelo').order_by('marca__nombre', 'modelo__nombre')
    
    if not formulas.exists():
        print("‚ö†Ô∏è No hay f√≥rmulas configuradas")
        return
    
    for formula in formulas:
        modelo_display = f"üîß {formula.modelo.nombre}" if formula.modelo else "üåê Gen√©rico"
        status = "‚úÖ Activo" if formula.activo else "‚ùå Inactivo"
        
        print(f"\n{status} {formula}")
        print(f"   Marca: {formula.marca.nombre}")
        print(f"   Modelo: {modelo_display}")
        print(f"   Modo: {formula.get_calculation_mode_display()}")


def simular_duplicacion_ma5800():
    """Simula la duplicaci√≥n de la f√≥rmula MA5800"""
    print("\n" + "="*60)
    print("üß™ SIMULACI√ìN: DUPLICAR MA5800")
    print("="*60)
    
    try:
        formula_ma5800 = IndexFormula.objects.get(
            marca__nombre='Huawei',
            modelo__nombre='MA5800'
        )
        
        print(f"‚úÖ F√≥rmula MA5800 encontrada: {formula_ma5800}")
        print(f"   Tipo: Espec√≠fica (modelo: {formula_ma5800.modelo.nombre})")
        
        print(f"\nüí° Acci√≥n 'üìã Duplicar f√≥rmula seleccionada':")
        print(f"   - Seleccionar: '{formula_ma5800.nombre}'")
        print(f"   - Resultado: Copia GEN√âRICA creada")
        print(f"   - Nombre: 'Huawei - MA5800 (Copia Gen√©rica)'")
        print(f"   - Estado: Inactiva (para revisar)")
        print(f"   - Modelo: NULL (gen√©rica)")
        
        print(f"\n‚úÖ VENTAJA: No hay conflicto de unicidad porque la copia es gen√©rica")
        
    except IndexFormula.DoesNotExist:
        print("‚ùå F√≥rmula MA5800 no encontrada")


def simular_duplicacion_generica():
    """Simula la duplicaci√≥n de la f√≥rmula gen√©rica"""
    print("\n" + "="*60)
    print("üß™ SIMULACI√ìN: DUPLICAR F√ìRMULA GEN√âRICA")
    print("="*60)
    
    try:
        formulas_genericas = IndexFormula.objects.filter(
            marca__nombre='Huawei',
            modelo__isnull=True
        )
        
        if not formulas_genericas.exists():
            print("‚ùå No hay f√≥rmulas gen√©ricas de Huawei")
            return
        
        formula_generica = formulas_genericas.first()
        
        print(f"‚úÖ F√≥rmula gen√©rica encontrada: {formula_generica}")
        print(f"   Tipo: Gen√©rica (modelo: NULL)")
        
        print(f"\nüí° Acci√≥n 'üìã Duplicar f√≥rmula seleccionada':")
        print(f"   - Seleccionar: '{formula_generica.nombre}'")
        print(f"   - Resultado: Copia GEN√âRICA creada")
        print(f"   - Nombre: 'Huawei - F√≥rmula Est√°ndar (Copia)'")
        print(f"   - Estado: Inactiva (para revisar)")
        print(f"   - Modelo: NULL (gen√©rica)")
        
        print(f"\nüí° Acci√≥n 'üéØ Duplicar para modelos espec√≠ficos':")
        print(f"   - Seleccionar: '{formula_generica.nombre}'")
        print(f"   - Resultado: F√≥rmulas espec√≠ficas para modelos sin f√≥rmula")
        
        # Verificar modelos sin f√≥rmula
        modelos_sin_formula = OLTModel.objects.filter(
            marca=formula_generica.marca,
            activo=True
        ).exclude(
            id__in=IndexFormula.objects.filter(
                marca=formula_generica.marca,
                modelo__isnull=False
            ).values_list('modelo_id', flat=True)
        )
        
        if modelos_sin_formula.exists():
            print(f"   - Modelos que recibir√≠an f√≥rmulas:")
            for modelo in modelos_sin_formula:
                print(f"     ‚Ä¢ {modelo.nombre} ‚Üí 'Huawei {modelo.nombre} - F√≥rmula espec√≠fica'")
        else:
            print(f"   - ‚úÖ Todos los modelos ya tienen f√≥rmulas espec√≠ficas")
        
    except IndexFormula.DoesNotExist:
        print("‚ùå F√≥rmula gen√©rica de Huawei no encontrada")


def mostrar_instrucciones_corregidas():
    """Muestra instrucciones de uso corregidas"""
    print("\n" + "="*60)
    print("üìñ INSTRUCCIONES CORREGIDAS")
    print("="*60)
    print("""
üéØ C√ìMO USAR LAS ACCIONES (CORREGIDAS):

1. üìã DUPLICAR F√ìRMULA SELECCIONADA:
   
   ‚úÖ F√ìRMULA ESPEC√çFICA (ej: MA5800):
   - Selecciona: "Huawei - MA5800"
   - Acci√≥n: "üìã Duplicar f√≥rmula seleccionada"
   - Resultado: "Huawei - MA5800 (Copia Gen√©rica)" (gen√©rica, inactiva)
   - ‚úÖ NO hay conflicto de unicidad
   
   ‚úÖ F√ìRMULA GEN√âRICA (ej: F√≥rmula Est√°ndar):
   - Selecciona: "Huawei - F√≥rmula Est√°ndar"
   - Acci√≥n: "üìã Duplicar f√≥rmula seleccionada"
   - Resultado: "Huawei - F√≥rmula Est√°ndar (Copia)" (gen√©rica, inactiva)

2. üéØ DUPLICAR PARA MODELOS ESPEC√çFICOS:
   - Solo funciona con f√≥rmulas GEN√âRICAS
   - Crea f√≥rmulas espec√≠ficas para modelos sin f√≥rmula
   - Evita duplicados autom√°ticamente

üîß L√ìGICA CORREGIDA:
   - F√≥rmula espec√≠fica ‚Üí Copia gen√©rica (evita conflicto)
   - F√≥rmula gen√©rica ‚Üí Copia gen√©rica (normal)
   - Todas las copias se crean INACTIVAS para revisar
   - Nombres √∫nicos para evitar confusiones

‚úÖ VENTAJAS:
   - No m√°s errores de unicidad
   - Copias seguras para experimentar
   - F√°cil identificaci√≥n de copias
   - Estado inactivo por defecto
    """)


if __name__ == "__main__":
    # Ejecutar todas las verificaciones
    mostrar_formulas_actuales()
    simular_duplicacion_ma5800()
    simular_duplicacion_generica()
    mostrar_instrucciones_corregidas()
    
    print("\n" + "="*60)
    print("‚úÖ VERIFICACI√ìN COMPLETA - ACCIONES CORREGIDAS")
    print("="*60)
    print("\nüí° Pr√≥ximos pasos:")
    print("   1. Ir al admin de f√≥rmulas SNMP")
    print("   2. Probar duplicaci√≥n de MA5800 (ahora funciona)")
    print("   3. Probar duplicaci√≥n para modelos espec√≠ficos")
    print("   4. Activar las copias que necesites")
    print()
