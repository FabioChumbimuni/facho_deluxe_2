"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import configparser

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Leer configuración desde config.ini
config = configparser.ConfigParser()
config_path = os.path.join(BASE_DIR, 'config.ini')
config.read(config_path)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vyeue=sj-%&g2l%n8l(9g76mh)=bzac4th384k7!%ly3w=asr9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    config.get('deployment', 'bind_ip', fallback='0.0.0.0'),
    'localhost',
    '127.0.0.1'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # REST Framework
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',
    'corsheaders',
    'drf_spectacular',
    # Apps del proyecto
    "hosts",
    "snmp_jobs",
    "executions",
    "discovery",
    "brands",
    "oids",
    "odf_management",
    "personal",
    "configuracion_avanzada",
    "snmp_get",
    "snmp_formulas",
    "olt_models",
    "zabbix_config",
    "api",  # App de la REST API
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS para REST API
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config.get('database', 'name', fallback='dbname'),
        'USER': config.get('database', 'user', fallback='dbuser'),
        'PASSWORD': config.get('database', 'password', fallback='change_me_in_config_ini'),
        'HOST': config.get('database', 'host', fallback='localhost'),
        'PORT': config.get('database', 'port', fallback='5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-pe'

TIME_ZONE = 'America/Lima'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# WhiteNoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración de Celery
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'

# Configuración de colas específicas
CELERY_TASK_ROUTES = {
    'snmp_jobs.tasks.discovery_main_task': {'queue': 'discovery_main'},
    'snmp_jobs.tasks.discovery_retry_task': {'queue': 'discovery_retry'},
    'snmp_jobs.tasks.discovery_manual_task': {'queue': 'discovery_manual'},  # Máxima prioridad
    'snmp_jobs.tasks.dispatcher_check_and_enqueue': {'queue': 'discovery_main'},
    'snmp_jobs.tasks.cleanup_old_executions_task': {'queue': 'cleanup'},
    'snmp_jobs.tasks.delete_history_records': {'queue': 'background_deletes'},
    # Tareas de ODF Management
    'odf_management.tasks.sync_single_olt_ports': {'queue': 'odf_sync'},
    'odf_management.tasks.sync_scheduled_olts': {'queue': 'odf_sync'},
    'odf_management.tasks.cleanup_old_sync_logs': {'queue': 'cleanup'},
    # Tareas de sincronización masiva batch
    'odf_management.tasks.sync_all_odf_hilos': {'queue': 'odf_sync'},
    'odf_management.tasks.sync_odf_hilos_for_olt': {'queue': 'odf_sync'},
    # Tareas de SNMP GET con pollers
    'snmp_get.tasks.get_main_task': {'queue': 'get_main'},
    'snmp_get.tasks.get_retry_task': {'queue': 'get_retry'},
    'snmp_get.tasks.get_poller_task': {'queue': 'get_poller'},
    'snmp_get.tasks.get_manual_task': {'queue': 'get_manual'},
    # Tareas de limpieza GET
    'snmp_get.cleanup_tasks.cleanup_interrupted_executions': {'queue': 'cleanup'},
    'snmp_get.cleanup_tasks.cancel_pending_executions_for_disabled_jobs': {'queue': 'cleanup'},
}

# Configuración de workers
CELERY_WORKER_CONCURRENCY = 20  # Para cola principal

# Configuración de reintentos
CELERY_TASK_ACKS_LATE = True
CELERY_TASK_REJECT_ON_WORKER_LOST = True
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']

# Configuración de timeouts
CELERY_TASK_SOFT_TIME_LIMIT = 300  # 5 minutos
CELERY_TASK_TIME_LIMIT = 600       # 10 minutos

# Configuración de beat (scheduler)
CELERY_BEAT_SCHEDULE = {
    'dispatcher-check-and-enqueue': {
        'task': 'snmp_jobs.tasks.dispatcher_check_and_enqueue',
        'schedule': 10.0,  # Cada 10 segundos - frecuencia fija para ser responsivo
    },
    'odf-scheduled-collection': {
        'task': 'odf_management.tasks.sync_scheduled_olts',
        'schedule': 60.0,  # Cada minuto - verifica programaciones de ODF
    },
    'odf-cleanup-old-logs': {
        'task': 'odf_management.tasks.cleanup_old_sync_logs',
        'schedule': 86400.0,  # Una vez al día - limpia logs antiguos
    },
    'sync-odf-hilos-every-5min': {
        'task': 'odf_management.tasks.sync_all_odf_hilos',
        'schedule': 300.0,  # Cada 5 minutos - sincronización masiva batch
    },
    'cleanup-interrupted-get-executions': {
        'task': 'snmp_get.cleanup_tasks.cleanup_interrupted_executions',
        'schedule': 1800.0,  # Cada 30 minutos - limpiar ejecuciones GET interrumpidas
    },
}

# Configuración de timeouts para tareas de descubrimiento
CELERY_TASK_SOFT_TIME_LIMIT = 180  # 3 minutos soft limit
CELERY_TASK_TIME_LIMIT = 200  # 3.5 minutos hard limit

# Configuración de reintentos
MAX_RETRIES = 3
RETRY_DELAY_SECONDS = 30  # segundos entre reintentos

# Configuración SNMP
SNMP_TIMEOUT = 10  # segundos (reducido de 30)
SNMP_RETRIES = 0  # solo 1 reintento (reducido de 3)
SNMP_COMMUNITY = 'public'

# Configuración de descubrimiento
MAX_CONSECUTIVE_FAILURES = 3
MAX_TOTAL_FAILURES = 5
RETRY_DELAYS = [60, 300, 600]  # segundos

# Configuración de monitoreo
TASK_CHECK_INTERVAL = 60  # segundos
OLT_HEALTH_CHECK_INTERVAL = 300  # segundos

# NOTA: La configuración de Zabbix se gestiona desde Django Admin
# Ver modelo: zabbix_config.models.ZabbixConfiguration
# Uso: ZabbixConfiguration.get_active_config()

# ============================================================================
# CONFIGURACIÓN DE REST FRAMEWORK
# ============================================================================

REST_FRAMEWORK = {
    # Esquema de API (para documentación automática)
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    
    # Autenticación
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ],
    
    # Permisos
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    
    # Paginación
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    
    # Filtros
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    
    # Formato de respuesta
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    
    # Límite de solicitudes (throttling)
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
    },
    
    # Formato de fecha/hora
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATE_FORMAT': '%Y-%m-%d',
    'TIME_FORMAT': '%H:%M:%S',
}

# Configuración de drf-spectacular (documentación de API)
SPECTACULAR_SETTINGS = {
    'TITLE': 'Facho Deluxe v2 API',
    'DESCRIPTION': 'API REST para gestión de SNMP, ONUs, ODF y Zabbix',
    'VERSION': '2.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/v1',
    'SERVERS': [
        {'url': 'http://localhost:8000', 'description': 'Desarrollo'},
        {'url': 'http://127.0.0.1:8000', 'description': 'Local'},
    ],
    'TAGS': [
        {'name': 'Hosts', 'description': 'Gestión de hosts OLT'},
        {'name': 'Discovery', 'description': 'Descubrimiento de ONUs'},
        {'name': 'SNMP Jobs', 'description': 'Trabajos SNMP programados'},
        {'name': 'Executions', 'description': 'Ejecuciones y monitoreo'},
        {'name': 'ODF', 'description': 'Gestión de ODF'},
        {'name': 'Formulas', 'description': 'Fórmulas SNMP'},
        {'name': 'Auth', 'description': 'Autenticación y permisos'},
    ],
}

# Configuración de CORS (Cross-Origin Resource Sharing)
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',  # React/Next.js
    'http://localhost:4200',  # Angular
    'http://localhost:8080',  # Vue.js
    'http://127.0.0.1:3000',
    'http://127.0.0.1:4200',
    'http://127.0.0.1:8080',
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Configuración de sincronización ODF
ODF_SYNC_INTERVAL = int(os.getenv('ODF_SYNC_INTERVAL', '300'))  # 5 minutos por defecto
ODF_HEALTH_CHECK_INTERVAL = int(os.getenv('ODF_HEALTH_CHECK_INTERVAL', '600'))  # 10 minutos


